import 'dart:io';
import 'dart:async';
import 'package:intl/intl.dart';
import 'package:flutter/material.dart';
import 'package:quehacemos_cba/src/services/event_service.dart';
import 'package:quehacemos_cba/src/providers/favorites_provider.dart';
import 'filter_criteria.dart';
import 'category_constants.dart';
import 'event_filter_logic.dart';
import 'event_data_builder.dart';

enum EventsLoadingState { idle, loading, loaded, error }

/// ViewModel refactorizado que usa la nueva arquitectura modular
/// Delega el procesamiento de eventos a EventDataBuilder y EventFilterLogic
class HomeViewModel with ChangeNotifier {
  final EventService _eventService = EventService();
  final EventDataBuilder _dataBuilder;
  final EventFilterLogic _filterLogic = EventFilterLogic();

  // Estado actual
  EventsLoadingState _state = EventsLoadingState.idle;
  List<Map<String, dynamic>> _allEvents = [];
  FilterCriteria _filterCriteria = FilterCriteria.empty;
  String? _errorMessage;

  // Configuraci√≥n de desarrollo
  final DateTime _devNow = DateTime(2025, 6, 4);

  // Eventos procesados (cache)
  List<Map<String, dynamic>> _processedEvents = [];
  Map<String, List<Map<String, dynamic>>> _groupedEvents = {};
  // NUEVO: Cache de datos convertidos a DateTime para optimizaci√≥n
  Map<DateTime, List<Map<String, dynamic>>> _groupedEventsDateTime = {}; // NUEVO: Cache DateTime
  List<DateTime> _sortedDatesDateTime = []; // NUEVO: Cache DateTime
  bool _dateTimeCacheValid = false; // NUEVO: Flag para invalidar cache

  HomeViewModel() : _dataBuilder = EventDataBuilder(DateTime(2025, 6, 4));
// Variables para control de refresh
  DateTime? _lastRefreshTime;
  static const Duration _refreshInterval = Duration(minutes: 5);

  // ============ GETTERS P√öBLICOS ============
  
  EventsLoadingState get state => _state;
  FilterCriteria get filterCriteria => _filterCriteria;
  String? get errorMessage => _errorMessage;
  bool get isLoading => _state == EventsLoadingState.loading;
  bool get hasError => _state == EventsLoadingState.error;
  DateTime get currentDate => _devNow;
  
  // Getters de datos procesados
  List<Map<String, dynamic>> get filteredEvents => _processedEvents;
  Map<String, List<Map<String, dynamic>>> get groupedEvents => _groupedEvents;
  
  // Getters derivados de FilterCriteria
  DateTime? get selectedDate => _filterCriteria.selectedDate;
  String get searchQuery => _filterCriteria.query;
  Set<String> get selectedCategories => _filterCriteria.selectedCategories;

  // ============ INICIALIZACI√ìN Y CARGA DE DATOS ============

  /// Inicializa el ViewModel con criterios opcionales
  Future<void> initialize({FilterCriteria? initialCriteria}) async {
    if (initialCriteria != null) {
      _filterCriteria = initialCriteria;
    }
    await loadEvents();
  }

  /// Carga eventos desde el servicio y los procesa
  Future<void> loadEvents() async {
    _state = EventsLoadingState.loading;
    _errorMessage = null;
    notifyListeners();

    try {
      final List<Map<String, dynamic>> events = await _retryOperation(() async {
        if (_filterCriteria.selectedDate != null) {
          return await _eventService
              .getEventsForDay(_filterCriteria.selectedDate!)
              .timeout(const Duration(seconds: 10));
        } else {
          return await _eventService.getAllEvents().timeout(
            const Duration(seconds: 10),
          );
        }
      });

      _allEvents = events;
      _state = EventsLoadingState.loaded;
      _processEvents();
    } catch (e) {
      _handleLoadError(e);
    }
  }
// ============ M√âTODOS DE FAVORITOS ============

  /// Toggle favorito de un evento
  void toggleFavorite(dynamic eventId, FavoritesProvider favoritesProvider) {
    favoritesProvider.toggleFavorite(eventId);
    print('ü§ç Toggle favorito: $eventId');
  }
  /// Procesa eventos usando la nueva arquitectura
/// Procesa eventos usando la nueva arquitectura
void _processEvents() {
  print('‚öôÔ∏è Procesando eventos con filtros: ${_filterCriteria.toString()}');
  
  if (_allEvents.isEmpty) {
    print('üì≠ No hay eventos para procesar');
    _processedEvents = [];
    _groupedEvents = {};
  } else {
    // Usar EventDataBuilder para procesamiento completo
    _groupedEvents = _dataBuilder.processEventsComplete(_allEvents, _filterCriteria);
    
    // Para compatibilidad, generar lista plana para HomePage
    _processedEvents = _dataBuilder.processEventsForHomePage(_allEvents, _filterCriteria);
    
    print('‚úÖ Procesados: ${_processedEvents.length} eventos, ${_groupedEvents.keys.length} fechas');
  }
  // NUEVO: Invalidar cache DateTime cuando se procesan eventos
  _dateTimeCacheValid = false; // NUEVO: Cache debe actualizarse
  // ASEGURAR que siempre notifique
  notifyListeners();
}
  // ============ M√âTODOS DE FILTRADO ============

/// Actualiza criterios de filtrado y reprocesa eventos
void updateFilterCriteria(FilterCriteria newCriteria) {
  print('üîÑ Actualizando filtros: ${newCriteria.toString()}');
  
  // SIEMPRE actualizar, sin comparaci√≥n problem√°tica
  _filterCriteria = newCriteria;
  _processEvents();
  print('‚úÖ Filtros actualizados. Eventos filtrados: ${_processedEvents.length}');
}

/// Actualiza solo la b√∫squeda
void setSearchQuery(String query) {
  print('üîç Actualizando b√∫squeda: "$query"');
  final newCriteria = _filterCriteria.copyWith(query: query);
  updateFilterCriteria(newCriteria);
}

/// Actualiza solo las categor√≠as seleccionadas
void setSelectedCategories(Set<String> categories) {
  print('üè∑Ô∏è Actualizando categor√≠as: $categories');
  final newCriteria = _filterCriteria.copyWith(selectedCategories: categories);
  updateFilterCriteria(newCriteria);
}
Future<void> refreshIfNeeded() async {
  final now = DateTime.now();
  
  if (_lastRefreshTime == null || 
      now.difference(_lastRefreshTime!) > _refreshInterval) {
    print('üîÑ Refresh autom√°tico por tiempo transcurrido');
    await refresh();
    _lastRefreshTime = now;
  } else {
    print('‚è∞ Refresh no necesario, √∫ltimo hace ${now.difference(_lastRefreshTime!).inMinutes} min');
  }
}
/// M√©todo espec√≠fico para toggle de categor√≠a (m√°s robusto)
void toggleCategory(String category) {
  print('üîÑ Toggle categor√≠a: $category');
  
  final currentCategories = Set<String>.from(_filterCriteria.selectedCategories);
  
  if (currentCategories.contains(category)) {
    currentCategories.remove(category);
    print('‚ûñ Removiendo categor√≠a: $category');
  } else {
    currentCategories.add(category);
    print('‚ûï Agregando categor√≠a: $category');
  }
  
  setSelectedCategories(currentCategories);
}

/// M√©todo espec√≠fico para seleccionar solo una categor√≠a
void selectSingleCategory(String category) {
  print('üéØ Seleccionando solo categor√≠a: $category');
  setSelectedCategories({category});
}

/// Limpia todos los filtros
void clearAllFilters() {
  print('üßπ Limpiando todos los filtros');
  updateFilterCriteria(FilterCriteria.empty);
}

/// Limpia solo la b√∫squeda
void clearSearch() {
  print('üßπ Limpiando b√∫squeda');
  setSearchQuery('');
}

/// Actualiza solo la fecha seleccionada
Future<void> setSelectedDate(DateTime? date) async {
  print('üìÖ Actualizando fecha: $date');
  
  final newCriteria = _filterCriteria.copyWith(
    selectedDate: date,
    clearDate: date == null,
  );
  
  // SIEMPRE actualizar y recargar para fechas
  _filterCriteria = newCriteria;
  await loadEvents(); // Recargar eventos si cambia la fecha
}

/// Limpia solo la fecha seleccionada
Future<void> clearSelectedDate() async {
  print('üßπ Limpiando fecha seleccionada');
  await setSelectedDate(null);
}

  // ============ COMPATIBILIDAD CON C√ìDIGO EXISTENTE ============

  /// Aplica filtros de categor√≠as (para PreferencesProvider)
  void applyCategoryFilters(Set<String> activeCategories) {
    setSelectedCategories(activeCategories);
  }

 

  /// Obtiene fechas ordenadas con prioridad para hoy/ma√±ana
  List<String> getSortedDates() {
    return _dataBuilder.getSortedDates(_groupedEvents);
  }
/// NUEVO: Obtiene eventos agrupados como DateTime (optimizado para HomePage)
Map<DateTime, List<Map<String, dynamic>>> getGroupedEventsDateTime() {
  if (!_dateTimeCacheValid) { // NUEVO: Solo convierte si el cache no es v√°lido
    _updateDateTimeCache();
  }
  return _groupedEventsDateTime;
}

/// NUEVO: Obtiene fechas ordenadas como DateTime (optimizado para HomePage)
List<DateTime> getSortedDatesDateTime() {
  if (!_dateTimeCacheValid) { // NUEVO: Solo convierte si el cache no es v√°lido
    _updateDateTimeCache();
  }
  return _sortedDatesDateTime;
}

/// NUEVO: Actualiza cache de DateTime (conversi√≥n una sola vez)
void _updateDateTimeCache() {
  print('üîÑ Actualizando cache DateTime...');
  
  // NUEVO: Convertir Map<String, List> ‚Üí Map<DateTime, List>
  _groupedEventsDateTime = {};
  for (final entry in _groupedEvents.entries) {
    final dateString = entry.key;
    DateTime? dateTime;
    
    try {
      // NUEVO: Misma l√≥gica de parsing que HomePage pero UNA sola vez
      dateTime = DateTime.tryParse(dateString) ?? 
                DateFormat('yyyy-MM-dd').tryParse(dateString) ??
                DateFormat('dd/MM/yyyy').tryParse(dateString);
    } catch (e) {
      print('‚ö†Ô∏è Error parseando fecha en cache: $dateString - $e');
    }
    
    if (dateTime != null) {
      _groupedEventsDateTime[dateTime] = entry.value;
    } else {
      print('‚ö†Ô∏è Usando fecha actual para cache: $dateString');
      _groupedEventsDateTime[DateTime.now()] = entry.value;
    }
  }
  
  // NUEVO: Convertir List<String> ‚Üí List<DateTime>
  _sortedDatesDateTime = [];
  final rawDates = _dataBuilder.getSortedDates(_groupedEvents);
  
  for (final dateString in rawDates) {
    DateTime? dateTime;
    try {
      dateTime = DateTime.tryParse(dateString) ?? 
                DateFormat('yyyy-MM-dd').tryParse(dateString) ??
                DateFormat('dd/MM/yyyy').tryParse(dateString);
    } catch (e) {
      print('‚ö†Ô∏è Error parseando fecha en sorted cache: $dateString - $e');
    }
    
    if (dateTime != null) {
      _sortedDatesDateTime.add(dateTime);
    }
  }
  
  _sortedDatesDateTime.sort(); // NUEVO: Ordenar fechas
  _dateTimeCacheValid = true; // NUEVO: Marcar cache como v√°lido
  
  print('‚úÖ Cache DateTime actualizado: ${_groupedEventsDateTime.keys.length} fechas');
}
  
  // ============ M√âTODOS ESPEC√çFICOS PARA CALENDARIO ============

/// Obtiene TODOS los eventos para calendario (sin l√≠mites)
List<Map<String, dynamic>> getCalendarEvents() {
  return _dataBuilder.processEventsForCalendar(_allEvents, _filterCriteria);
}
/// Obtiene TODOS los eventos sin filtros para favoritos
List<Map<String, dynamic>> get allEvents => _allEvents;

/// Obtiene eventos agrupados para calendario (sin l√≠mites)
Map<String, List<Map<String, dynamic>>> getCalendarGroupedEvents() {
  return _dataBuilder.processEventsCompleteForCalendar(_allEvents, _filterCriteria);
}

/// Obtiene eventos de un mes espec√≠fico para calendario
  Future<List<Map<String, dynamic>>> getEventsForMonth(DateTime month) async {
    try {
      print('üìÖ Cargando eventos para: ${month.month}/${month.year}');
      
      // 1. Obtener eventos del servicio
      final allEvents = await _eventService.getAllEvents()
          .timeout(const Duration(seconds: 10));
      
      print('üìä Eventos totales: ${allEvents.length}');
      
      
      // 3. Usar EventDataBuilder para filtrar eficientemente
      final monthStart = DateTime(month.year, month.month, 1);
      final monthEnd = DateTime(month.year, month.month + 1, 0, 23, 59, 59);
      
      // Crear criterio espec√≠fico para el mes
      final monthCriteria = _filterCriteria.copyWith(
        selectedDate: null, // No filtrar por d√≠a espec√≠fico
      );
      
      // 4. Procesar Y filtrar en una sola pasada
      final filteredEvents = allEvents.where((event) {
        try {
          // Parsear fecha del evento
          final eventDateStr = event['date'] ?? '';
          final eventDate = DateFormat('yyyy-MM-dd').tryParse(eventDateStr) ??
              DateFormat('yyyy-MM-ddTHH:mm').tryParse(eventDateStr);
          
          if (eventDate == null) return false;
          
          // Verificar si est√° en el mes correcto
          return eventDate.year == month.year && eventDate.month == month.month;
        } catch (e) {
          print('‚ö†Ô∏è Error parseando fecha: ${event['date']} - $e');
          return false;
        }
      }).toList();
      
      // 5. Aplicar filtros adicionales (b√∫squeda, categor√≠as) usando la arquitectura existente
      final finalEvents = _dataBuilder.processEventsForCalendar(filteredEvents, monthCriteria);
      
      print('‚úÖ Eventos del mes procesados: ${finalEvents.length}');
      return finalEvents;
      
    } catch (e) {
      print('‚ùå Error cargando eventos del mes: $e');
      return [];
    }
  }

/// Obtiene eventos de un d√≠a espec√≠fico para calendario
  List<Map<String, dynamic>> getEventsForDay(DateTime day) {
    final dayString = DateFormat('yyyy-MM-dd').format(day);
    
    // Usar los eventos ya cacheados si es el mes actual
    return _allEvents.where((event) {
      final eventDate = event['date'] ?? '';
      return eventDate.startsWith(dayString);
    }).toList();
  }

// ============ COMPATIBILIDAD - M√âTODOS EXISTENTES PARA HOMEPAGE ============

/// Obtiene eventos limitados para HomePage (mantiene l√≠mite de 30)
List<Map<String, dynamic>> getHomePageEvents() {
  return _processedEvents; // Ya tiene l√≠mite aplicado
}

/// Obtiene eventos agrupados por fecha (mantiene l√≠mite)
Map<String, List<Map<String, dynamic>>> getGroupedEvents() {
  return _groupedEvents; // Ya tiene l√≠mite aplicado
}

  // ============ M√âTODOS DE PRESENTACI√ìN (DELEGADOS) ============

  /// Obtiene t√≠tulo de secci√≥n para una fecha
  String getSectionTitle(String date) {
    return _dataBuilder.getSectionTitle(date);
  }
/// Obtiene nombre de categor√≠a con emoji delegando a EventDataBuilder
  String getCategoryWithEmoji(String type) {
    return _dataBuilder.getCategoryWithEmoji(type);
  }
  /// Obtiene t√≠tulo principal de la p√°gina
  String getPageTitle() {
    return _dataBuilder.getPageTitleFromCriteria(_filterCriteria);
  }

  /// Obtiene color de card seg√∫n tipo de evento
  Color getEventCardColor(String eventType, BuildContext context) {
    return _dataBuilder.getEventCardColor(eventType, context);
  }

  /// Formatea fecha para mostrar en eventos
  String formatEventDate(String dateString, {String format = 'full'}) {
    return _dataBuilder.formatEventDate(dateString, format: format);
}
  // ============ AN√ÅLISIS Y ESTAD√çSTICAS ============

  /// Obtiene estad√≠sticas de los eventos actuales
  Map<String, dynamic> getEventStatistics() {
    return _dataBuilder.getEventStatistics(_processedEvents);
  }

  /// Verifica si hay filtros activos
  bool get hasActiveFilters => _filterCriteria.hasActiveFilters;

  /// Verifica si solo hay b√∫squeda activa
  bool get hasOnlySearch => _filterCriteria.hasOnlySearch;

  /// Obtiene resumen de filtros activos para UI
  String getActiveFiltersDescription() {
    if (_filterCriteria.isEmpty) return 'Sin filtros';
    
    final parts = <String>[];
    
    if (_filterCriteria.query.isNotEmpty) {
      parts.add('B√∫squeda: "${_filterCriteria.query}"');
    }
    
    if (_filterCriteria.selectedCategories.isNotEmpty) {
      parts.add('${_filterCriteria.selectedCategories.length} categor√≠as');
    }
    
    if (_filterCriteria.selectedDate != null) {
      parts.add('Fecha espec√≠fica');
    }
    
    return parts.join(', ');
  }

  // ============ OPERACIONES DE REFRESH ============

  /// Refresh/reload completo
  Future<void> refresh() async {
    await loadEvents();
  }

  /// Recarga manteniendo filtros actuales
  Future<void> reloadWithCurrentFilters() async {
    final currentCriteria = _filterCriteria;
    await loadEvents();
    // Los filtros se mantienen autom√°ticamente
  }

  // ============ M√âTODOS PRIVADOS ============

  /// Manejo de errores de carga
  void _handleLoadError(Object error) {
    if (error is SocketException) {
      _state = EventsLoadingState.error;
      _errorMessage = 'No hay conexi√≥n a internet.';
    } else if (error is TimeoutException) {
      _state = EventsLoadingState.error;
      _errorMessage = 'La carga de eventos tom√≥ demasiado tiempo.';
    } else {
      _state = EventsLoadingState.error;
      _errorMessage = 'Ocurri√≥ un error inesperado: $error';
    }

    _processedEvents = [];
    _groupedEvents = {};
    notifyListeners();
  }

  /// Reintento con delay exponencial
  Future<T> _retryOperation<T>(
    Future<T> Function() operation, {
    int maxRetries = 3,
  }) async {
    var delay = const Duration(seconds: 1);
    
    for (var attempt = 0; attempt < maxRetries; attempt++) {
      try {
        return await operation();
      } catch (e) {
        if (attempt == maxRetries - 1) rethrow;
        
        await Future.delayed(delay);
        delay = Duration(seconds: delay.inSeconds * 2); // Backoff exponencial
      }
    }
    
    throw Exception("No se pudo completar la operaci√≥n");
  }

  // ============ M√âTODOS DE DEPURACI√ìN ============

  /// Debug: informaci√≥n del estado actual
  Map<String, dynamic> getDebugInfo() {
    return {
      'state': _state.toString(),
      'totalEvents': _allEvents.length,
      'filteredEvents': _processedEvents.length,
      'groupedDates': _groupedEvents.keys.length,
      'filterCriteria': _filterCriteria.toString(),
      'hasError': hasError,
      'errorMessage': _errorMessage,
    };
  }

  @override
  void dispose() {
    // Cleanup si es necesario
    super.dispose();
  }
}